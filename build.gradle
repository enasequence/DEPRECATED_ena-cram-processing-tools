plugins {
     id 'org.hidetake.ssh' version '2.9.0'
     id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = 1.8

group = 'uk.ac.ebi.ena'
archivesBaseName = 'ena-cram-processing-tools'

version='1.0.0'

mainClassName = 'net.sf.cram.CramTools'


repositories {
    mavenLocal()
    maven { url "http://ena-dev:8081/artifactory/all" }
    mavenCentral()
}

dependencies {
    compile 'com.github.samtools:htsjdk:2.13.2'    
    compile 'org.apache.commons:commons-compress:1.9'   
    compile 'com.beust:jcommander:1.48'   
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.2'
}

jar.manifest {
    attributes('Implementation-Title': project.name,
               'Implementation-Version': project.version,
               'Source-Compatibility': project.sourceCompatibility
    )
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourceJar { classifier "sources" }
    }
  }
  
repositories {
	maven {
	        credentials {
	            username artifactoryUsername
	            password artifactoryPassword
	        }
	        url "http://ena-dev:8081/artifactory/libs-release-local"
	    }
	}
}


remotes {
    prod_oy {
        host = 'oy-ena-login-2'
        user = 'era'
        identity = file("${System.properties['user.home']}/.ssh/id_dsa")
        knownHosts = allowAnyHosts
    }
    prod_yoda {
        host = 'hh-yoda-08-01.ebi.ac.uk'
        user = 'era'
        identity = file("${System.properties['user.home']}/.ssh/id_dsa")
        knownHosts = allowAnyHosts
    }
}

sourceSets {
	main {
		java {
			srcDir 'src'			
		}

		resources {
		  srcDir 'resources'
    	}
	}
}

task 'deploy-oy'( dependsOn: 'shadowJar' ) << {
	def eraHome = '/homes/era/lib'
    ssh.run {
        session( remotes.prod_oy ) {
            println "Uploading jar $shadowJar.archivePath.absolutePath to $eraHome"
        	//put bytes: [0x0a, 0x0c], into: "/homes/era/empty.txt"
        	put from: shadowJar.archivePath.absolutePath, into: "$eraHome/."
        	println "creating symbolic link to $shadowJar.archiveName as $shadowJar.baseName.$shadowJar.extension"
            def result = execute "ln -s -f $eraHome/$shadowJar.archiveName $eraHome/$shadowJar.baseName.$shadowJar.extension", ignoreError: true
        	println result
        }
    }
}


task 'deploy-yoda'( dependsOn: 'shadowJar' ) << {
	def eraHome = '/homes/era/lib'
    ssh.run {
        session( remotes.prod_yoda ) {
            println "Uploading jar $shadowJar.archivePath.absolutePath to $eraHome"
        	put bytes: [0x0a, 0x0c], into: "/homes/era/empty.txt"
        	//put from: shadowJar.archivePath.absolutePath, into: "$eraHome/."
        	println "creating symbolic link to $shadowJar.archiveName as $shadowJar.baseName.$shadowJar.extension"
            def result = execute "ln -s -f $eraHome/$shadowJar.archiveName $eraHome/$shadowJar.baseName.$shadowJar.extension", ignoreError: true
        	println result
        }
    }
}


task 'deploy-all' { dependsOn  'deploy-oy', 'deploy-yoda' }