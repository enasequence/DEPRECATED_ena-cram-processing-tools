/*
 * Copyright 2019 EMBL - European Bioinformatics Institute
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

plugins {
     id 'org.hidetake.ssh' version '2.9.0'
     id "com.github.johnrengelman.shadow" version "4.0.1"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'


sourceCompatibility = 1.8

group = 'uk.ac.ebi.ena'
archivesBaseName = 'ena-cram-processing-tools'

version='1.1.0'

mainClassName = 'net.sf.cram.CramTools'

configurations.all {
	if( !hasProperty( 'gitlab_private_token' ) )
		project.ext.properties.gitlab_private_token = ''
	else
		project.ext.properties.gitlab_private_token = gitlab_private_token;
}

def private_token = project.ext.properties.gitlab_private_token

repositories {
    mavenLocal()
    maven { url "http://ena-dev:8081/artifactory/all" }
    mavenCentral()
}

dependencies {
    compile 'com.github.samtools:htsjdk:2.13.2'    
    compile 'org.apache.commons:commons-compress:1.9'   
    compile 'com.beust:jcommander:1.48'
    compile 'junit:junit:4.12'
    testCompile 'junit:junit:4.12'
}

jar.manifest {
    attributes('Implementation-Title': project.name,
               'Implementation-Version': project.version,
               'Source-Compatibility': project.sourceCompatibility
    )
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}


publishing {
	publications {
    	mavenJava(MavenPublication) {
      		from components.java
      		artifact sourceJar { classifier "sources" }
    	}
  	}
  
	repositories {
		maven { url "https://gitlab.ebi.ac.uk/api/v4/projects/811/packages/maven"
				credentials(HttpHeaderCredentials) {
		    		name = "Private-Token"
		        	value = private_token
		        }
		        authentication {
		        	header( HttpHeaderAuthentication )
				}
		    }
	}
}


remotes {
    prod_sra {
        host = 'sra-login'
        user = 'era'
        identity = file("${System.properties['user.home']}/.ssh/id_dsa")
        knownHosts = allowAnyHosts
    }
    prod_yoda {
        host = 'yoda-login'
        user = 'era'
        identity = file("${System.properties['user.home']}/.ssh/id_dsa")
        knownHosts = allowAnyHosts
    }
}


task 'deploy-sra'( dependsOn: 'shadowJar' ) doLast {
	def eraHome = '/homes/era/lib'
    ssh.run {
        session( remotes.prod_sra ) {
            println "Uploading jar $shadowJar.archivePath.absolutePath to $eraHome"
        	//put bytes: [0x0a, 0x0c], into: "/homes/era/empty.txt"
        	put from: shadowJar.archivePath.absolutePath, into: "$eraHome/."
        	println "creating symbolic link to $shadowJar.archiveName as $shadowJar.baseName.$shadowJar.extension"
            def result = execute "ln -s -f $eraHome/$shadowJar.archiveName $eraHome/$shadowJar.baseName.$shadowJar.extension", ignoreError: true
        	println result
        }
    }
}


task 'deploy-yoda'( dependsOn: 'shadowJar' ) doLast {
	def eraHome = '/homes/era/lib'
    ssh.run {
        session( remotes.prod_yoda ) {
            println "Uploading jar $shadowJar.archivePath.absolutePath to $eraHome"
        	put bytes: [0x0a, 0x0c], into: "/homes/era/empty.txt"
        	//put from: shadowJar.archivePath.absolutePath, into: "$eraHome/."
        	println "creating symbolic link to $shadowJar.archiveName as $shadowJar.baseName.$shadowJar.extension"
            def result = execute "ln -s -f $eraHome/$shadowJar.archiveName $eraHome/$shadowJar.baseName.$shadowJar.extension", ignoreError: true
        	println result
        }
    }
}


task 'deploy-all' { dependsOn  'deploy-sra', 'deploy-yoda' }


test {

    maxHeapSize = "1024m"

    jvmArgs "-Dfile.encoding=UTF-8"

    testLogging {

        events "failed", "standardOut", "standardError"

    }

}


task writePom {
    doLast {
        pom {
            project {
                inceptionYear '2019'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo( "pom.xml" )
    }
}   


compileJava.dependsOn( writePom )
